subprojects {
    apply plugin: 'java'
    //apply plugin: 'com.github.johnrengelman.shadow'
    repositories {
        mavenCentral()
    }
    dependencies {
        // https://mvnrepository.com/artifact/com.google.code.gson/gson
        implementation 'com.google.code.gson:gson:2.10.1'
    }
}


project(':server') {
    apply plugin: 'application'
    mainClassName = 'server.AppServer'
    dependencies {
        implementation project(':general')
        implementation group: 'com.opencsv', name: 'opencsv', version: '5.7.1'
        // https://mvnrepository.com/artifact/com.google.code.gson/gson
        implementation 'com.google.code.gson:gson:2.10.1'
        // https://mvnrepository.com/artifact/org.postgresql/postgresql
    }
    jar {
        manifest {
            attributes 'Main-Class': 'server.AppServer'
        }
    }
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    task fatJarServer(type: Jar) {
        manifest {
            attributes 'Main-Class': 'server.AppServer'
        }
        baseName = 'lab6-server'
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }

}

project(':client') {
    apply plugin: 'application'
    mainClassName = 'client.AppClient'
    dependencies {
        implementation project(':general')
        implementation project(':server')
        implementation group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.15'
    }
    run {
        standardInput = System.in
    }
    jar {
        manifest {
            attributes 'Main-Class': 'client.AppClient'
        }
    }
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    task fatJarClient(type: Jar) {
        manifest {
            attributes 'Main-Class': 'client.AppClient'
        }
        baseName = 'lab6-client'
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }

}